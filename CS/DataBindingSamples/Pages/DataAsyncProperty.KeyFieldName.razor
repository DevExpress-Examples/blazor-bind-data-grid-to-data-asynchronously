@page "/DataAsyncUsingKeyFieldName"
@inject WeatherForecastService WeatherForecastService

<h2>DataAsync: KeyFieldName</h2>

<p>
    This example uses the <a class="helplink" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1.DataAsync" target="_blank">DataAsync</a> property to load a data source asynchronously. To avoid possible errors, the Data Grid should be able to identify data items individually. This examples marks the key data source field with the <a class="helplink" href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.keyattribute" target="_blank">Key</a> and specifies the Data Grid's <a class="helplink" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1.KeyFieldName" target="_blank">KeyFieldName</a> property. Use this method if your objects are not persistent (for instance, DTO items from a Web API request).
</p>

<p>
    Note that the <b>Render GUID</b> does not change during page initialization. This means the page is rendered only once.
</p>

<p>
    <b>Render GUID</b>: @Guid.NewGuid()
</p>

<DxDataGrid DataAsync="@LoadDataAsync" KeyFieldName="Id">
    <Columns>
        <DxDataGridColumn Field="@nameof(WeatherForecast.Summary)" />
        <DxDataGridDateEditColumn Field="@nameof(WeatherForecast.Date)" />
        <DxDataGridSpinEditColumn Field="@nameof(WeatherForecast.TemperatureC)" />
        <DxDataGridSpinEditColumn Field="@nameof(WeatherForecast.TemperatureF)" />
    </Columns>
</DxDataGrid>
@code {
    async Task<IEnumerable<WeatherForecast>> LoadDataAsync(CancellationToken token) {
        return await WeatherForecastService.GetForecastAsync(DateTime.Now.Date);
    }
}